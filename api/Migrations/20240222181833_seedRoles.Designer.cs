// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240222181833_seedRoles")]
    partial class seedRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5244b7a3-7f42-4807-8bf7-daf980557964",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "49536326-e934-46f6-bb75-7df43a13e669",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "dcf73c32-4c12-48d2-9f00-1d4c20d47b8c",
                            Name = "Operator",
                            NormalizedName = "OPERATOR"
                        },
                        new
                        {
                            Id = "2f56e6f1-3c05-4f31-9e7e-db59b281fb1f",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Leading the tech industry.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(597),
                            StockId = 1,
                            Title = "Innovative"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Consistent growth over the years.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(599),
                            StockId = 2,
                            Title = "Solid Performance"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Dominating the retail space.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(601),
                            StockId = 3,
                            Title = "Expansive Reach"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Continuously innovating.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(602),
                            StockId = 4,
                            Title = "Tech Giant"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Changing how we connect.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(604),
                            StockId = 5,
                            Title = "Social Impact"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Transforming the auto industry.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(605),
                            StockId = 6,
                            Title = "Revolutionary"
                        },
                        new
                        {
                            Id = 7,
                            Content = "A diverse portfolio.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(606),
                            StockId = 7,
                            Title = "Stable Investment"
                        },
                        new
                        {
                            Id = 8,
                            Content = "A key player in global finance.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(608),
                            StockId = 8,
                            Title = "Financial Leader"
                        },
                        new
                        {
                            Id = 9,
                            Content = "Reliable and consistent.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(609),
                            StockId = 9,
                            Title = "Trusted Brand"
                        },
                        new
                        {
                            Id = 10,
                            Content = "A cornerstone of retail.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(610),
                            StockId = 10,
                            Title = "Retail Powerhouse"
                        },
                        new
                        {
                            Id = 11,
                            Content = "Leading in graphics technology.",
                            CreationTime = new DateTime(2024, 2, 22, 22, 18, 31, 69, DateTimeKind.Local).AddTicks(612),
                            StockId = 11,
                            Title = "Tech Innovator"
                        });
                });

            modelBuilder.Entity("api.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LastDiv")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("MarketCap")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Purchase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Apple Inc.",
                            Industry = "Technology",
                            LastDiv = 0.82m,
                            MarketCap = 2000000000000L,
                            Purchase = 150.00m,
                            Symbol = "AAPL"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Microsoft Corporation",
                            Industry = "Technology",
                            LastDiv = 1.24m,
                            MarketCap = 1800000000000L,
                            Purchase = 250.00m,
                            Symbol = "MSFT"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "Amazon.com, Inc.",
                            Industry = "Retail",
                            LastDiv = 0.00m,
                            MarketCap = 1600000000000L,
                            Purchase = 3100.00m,
                            Symbol = "AMZN"
                        },
                        new
                        {
                            Id = 4,
                            CompanyName = "Alphabet Inc.",
                            Industry = "Technology",
                            LastDiv = 0.00m,
                            MarketCap = 1500000000000L,
                            Purchase = 2800.00m,
                            Symbol = "GOOGL"
                        },
                        new
                        {
                            Id = 5,
                            CompanyName = "Meta Platforms, Inc.",
                            Industry = "Technology",
                            LastDiv = 0.00m,
                            MarketCap = 800000000000L,
                            Purchase = 325.00m,
                            Symbol = "FB"
                        },
                        new
                        {
                            Id = 6,
                            CompanyName = "Tesla, Inc.",
                            Industry = "Automotive",
                            LastDiv = 0.00m,
                            MarketCap = 600000000000L,
                            Purchase = 900.00m,
                            Symbol = "TSLA"
                        },
                        new
                        {
                            Id = 7,
                            CompanyName = "Berkshire Hathaway Inc.",
                            Industry = "Conglomerate",
                            LastDiv = 0.00m,
                            MarketCap = 550000000000L,
                            Purchase = 350000.00m,
                            Symbol = "BRK.A"
                        },
                        new
                        {
                            Id = 8,
                            CompanyName = "Visa Inc.",
                            Industry = "Financial Services",
                            LastDiv = 1.28m,
                            MarketCap = 450000000000L,
                            Purchase = 220.00m,
                            Symbol = "V"
                        },
                        new
                        {
                            Id = 9,
                            CompanyName = "Johnson & Johnson",
                            Industry = "Healthcare",
                            LastDiv = 3.80m,
                            MarketCap = 400000000000L,
                            Purchase = 165.00m,
                            Symbol = "JNJ"
                        },
                        new
                        {
                            Id = 10,
                            CompanyName = "Walmart Inc.",
                            Industry = "Retail",
                            LastDiv = 2.16m,
                            MarketCap = 350000000000L,
                            Purchase = 140.00m,
                            Symbol = "WMT"
                        },
                        new
                        {
                            Id = 11,
                            CompanyName = "NVIDIA Corporation",
                            Industry = "Technology",
                            LastDiv = 0.16m,
                            MarketCap = 300000000000L,
                            Purchase = 500.00m,
                            Symbol = "NVDA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.HasOne("api.Models.Stock", "Stock")
                        .WithMany("Comments")
                        .HasForeignKey("StockId");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("api.Models.Stock", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
